#version 330 core
#define PI 3.1415926535897932384626433832795

float gaussian(float offset);

out vec4 FragColor;

in vec2 TexCoords;

uniform sampler2D brightFrame;

uniform bool blurDirection;
uniform float stdDev;
uniform int kernelSize;

void main()
{             
     vec2 tex_offset = 1.0 / textureSize(brightFrame, 0);
     float actual_offset = 0.0;
     vec3 result = texture(brightFrame, TexCoords).rgb * gaussian(actual_offset);
     if(blurDirection)
     {
         for(int i = 1; i < kernelSize; i++)
         {
            actual_offset += tex_offset.x;
            result += texture(brightFrame, TexCoords + vec2(actual_offset, 0.0)).rgb * gaussian(actual_offset);
            result += texture(brightFrame, TexCoords - vec2(actual_offset, 0.0)).rgb * gaussian(actual_offset);
         }
     }
     else
     {
         for(int i = 1; i < kernelSize; i++)
         {
            actual_offset += tex_offset.y;
            result += texture(brightFrame, TexCoords + vec2(0.0, actual_offset)).rgb * gaussian(actual_offset);
            result += texture(brightFrame, TexCoords - vec2(0.0, actual_offset)).rgb * gaussian(actual_offset);
         }
     }
     FragColor = vec4(result, 1.0);
}

float gaussian(float offset) {
    if(blurDirection)
        return exp(-pow(TexCoords.x+offset-TexCoords.x,2)/(2*pow(stdDev + 1e-6,2)))/sqrt(2*PI*stdDev + 1e-6);
    else
        return exp(-pow(TexCoords.y+offset-TexCoords.y,2)/(2*pow(stdDev + 1e-6,2)))/sqrt(2*PI*stdDev + 1e-6);
}